#mkObsFrcstPair.py
#Programa que toma datos procesados de estaciones (EMA,REDMET) asi como series de tiempo de WRF y genera un archivo de pares observacion-pronostico para ser usado en la verificacion 
#Programador Oscar Jurado
#Fecha de creacion 5 de Julio 2016

#-------------Requisitos--------------------------------------------------------------
#Para correr el programa se necesita tener la utilidad de python xlrd,csv,numpy instalados. 
#Los datos de entrada deben provenir de archivos procesados con programa leerEma.py, leerRedmet.py y mkTimeSeriesWRF.sh 
#Formato de archivos de tal manera que exista ../dataFiles/pairs

#-------------Uso---------------------------------------------------------------------
#El programa se corre desde la terminal, poniendo el nombre de los archivos como entrada en este orden: 1)Archivo de estacion 2)Archivo WRF
#Ejemplo:
#python mkObsFrcstPair.py ACO_TM.txt CCA_27_TEMP.txt
#Se recomienda usar en conjunto con la utileria 

#------------Versiones----------------------------------------------------------------
#v1.0 5/Jul/2016 Se crea el programa. 


#-----------Problemas conocidos--------------------------------------------------------


#----------INICIO DEL PROGRAMA--------------------------------------------------------

#Comenzamos cargando la libreria sys, csv, numpy
import sys
import csv
import numpy as np

#-----------ABRIR ARCHIVO----------------------------------
#leemos el archivo

cl_line = sys.argv

#Lineas usadas en el debug 
OBS_file_name = 'ACO_TM.txt'
WRF_file_name = 'ACO_02_05_15_TEMP.txt'

#OBS_file_name = cl_line[1]
#WRF_file_name = cl_line[2]

#Abrir los archivos
OBS_file = open(OBS_file_name, "r")
WRF_file = open(WRF_file_name, "r")
#Y ahora lo pasamos a una lista
obs_lines = OBS_file.readlines()
wrf_lines = WRF_file.readlines()

#Cerramos el archivo ya que no lo necesitamos
OBS_file.close()
WRF_file.close()

#Quitamos el encabezado del archivo WRF
wrf_num = len(wrf_lines)
wrf_lines = wrf_lines[1:wrf_num]

#Debemos ahora pasar el contenido de las listas de strings a flotantes

obs_list = []
for line in obs_lines:
	obs_lines_split = [x.strip() for x in line.split(',')]
	obs_lines_split = [float(i) for i in obs_lines_split]
	obs_list.append(obs_lines_split)

wrf_list = []
for line in wrf_lines:
	wrf_lines_split = [x.strip() for x in line.split(',')]
	wrf_lines_split = [float(i) for i in wrf_lines_split]
	wrf_list.append(wrf_lines_split)


#Ahora, buscamos en donde la primer fecha del archivo WRF concuerda con el de observaciones. 
#para recordar los archivos estan de la siguiente manera:
#OBSERVACIONES: dato,	mes,	dia,	hora
#WRF:		hora,	lon,	lat,	dato

#Para obtener el mes y dia del archivo WRF usaremos la informacion del nombre de archivo. 
#Nos aprovechamos de que tiene formato dd_mm_yy
wrf_date = WRF_file_name.split('_')
#Quitamos lo que no es un numero para poder convertirlo a flotantes
wrf_date = wrf_date[1:4]
wrf_date = [float(i) for i in wrf_date]
#Tenemos ahora en wrf_date = [dd, mm, yy]
wrf_month = wrf_date[1]
wrf_day = wrf_date[0]

#Busquemos entonces donde se empalma el mes

ind = 0
for line in obs_list:
	if wrf_month != line[1]:
		ind = ind + 1
	else:
		break
	
#Rehacemos para tener solo los datos que queremos
obs_mes_in = obs_list[ind:len(obs_list)+1]

fid = 0
while wrf_month == obs_mes_in[fid][1]:
	fid = fid + 1

obs_mes = obs_mes_in[0:fid]

#Ahora ajustamos el dia

did = 0
while wrf_day != obs_mes[did][2]:
	did = did + 1
 
obs_day = obs_mes[did:len(obs_mes)+1]



